[{"content":"","date":"2024-01-18T23:38:16+08:00","permalink":"https://example.com/p/testing/","title":"Testing"},{"content":"原文： https://www.avanderlee.com/swiftui/conditional-view-modifier/\n如果是有条件的展示View，平时的写法 1 2 3 4 5 6 7 8 9 10 11 12 13 struct ContentView: View { var body: some View { if #available(iOS 14.0, *) { Text(\u0026#34;Hello, world!\u0026#34;) .padding() } else { /// iOS 13 only Text(\u0026#34;Hello, world!\u0026#34;) .background(Color.red) // Apply a red color .padding() } } } 简化：\n第一次尝试：添加一个View extension\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 extension View { /// Applies the given transform if the given condition evaluates to `true`. /// - Parameters: /// - condition: The condition to evaluate. /// - transform: The transform to apply to the source `View`. /// - Returns: Either the original `View` or the modified `View` if the condition is `true`. @ViewBuilder func `if`\u0026lt;Content: View\u0026gt;(_ condition: Bool, transform: (Self) -\u0026gt; Content) -\u0026gt; some View { if condition { transform(self) } else { self } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 struct ContentView: View { private var shouldApplyBackground: Bool { guard #available(iOS 14, *) else { return true } return false } var body: some View { Text(\u0026#34;Hello, world!\u0026#34;) .padding() .if(shouldApplyBackground) { view in // We only apply this background color if shouldApplyBackground is true view.background(Color.red) } } } 第二次尝试：通过在添加一个autoclosure 闭包来返回 if 结果，从而减少属性的添加\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 extension View { /// Applies the given transform if the given condition evaluates to `true`. /// - Parameters: /// - condition: The condition to evaluate. /// - transform: The transform to apply to the source `View`. /// - Returns: Either the original `View` or the modified `View` if the condition is `true`. @ViewBuilder func `if`\u0026lt;Content: View\u0026gt;(_ condition: @autoclosure () -\u0026gt; Bool, transform: (Self) -\u0026gt; Content) -\u0026gt; some View { if condition() { transform(self) } else { self } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 struct ContentView: View { var body: some View { Text(\u0026#34;Hello, world!\u0026#34;) .padding() .if({ if #available(iOS 14, *) { return true } return false }()) { view in view.background(Color.red) } } } 第三次的尝试，也是最优解：可读性高\n继续使用第一次尝试的view Extension，而是将版本的判断添加到了一个Bool值的Extension\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 extension View { /// Applies the given transform if the given condition evaluates to `true`. /// - Parameters: /// - condition: The condition to evaluate. /// - transform: The transform to apply to the source `View`. /// - Returns: Either the original `View` or the modified `View` if the condition is `true`. @ViewBuilder func `if`\u0026lt;Content: View\u0026gt;(_ condition: Bool, transform: (Self) -\u0026gt; Content) -\u0026gt; some View { if condition { transform(self) } else { self } } } 1 2 3 4 5 6 7 8 9 10 extension Bool { static var iOS13: Bool { guard #available(iOS 14, *) else { // It\u0026#39;s iOS 13 so return true. return true } // It\u0026#39;s iOS 14 so return false. return false } } 1 2 3 4 5 6 7 8 9 10 struct ContentView: View { var body: some View { Text(\u0026#34;Hello, world!\u0026#34;) .padding() .if(.iOS13) { view in view.background(Color.red) } } } Click to expand! Hidden explanation ","date":"2024-01-18T14:54:29+08:00","permalink":"https://example.com/p/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","title":"第一篇博客"}]