[{"content":"SwiftUI中如何优雅创建条件式修饰符 在一些小的需求，我们可以会通过if语句这么写，比如\n1 2 3 4 5 6 7 8 9 10 11 12 13 struct ContentView: View { var body: some View { if #available(iOS 14.0, *) { Text(\u0026#34;Hello, world!\u0026#34;) .padding() } else { /// iOS 13 only Text(\u0026#34;Hello, world!\u0026#34;) .background(Color.red) // Apply a red color .padding() } } } 虽然看着没什么问题，但是如果一个View的modifier多了，那么都需要复制一遍，在维护和可读性造成了很大的挑战\n第一次尝试 1 2 3 4 5 6 7 8 9 10 11 12 13 14 extension View { /// Applies the given transform if the given condition evaluates to `true`. /// - Parameters: /// - condition: The condition to evaluate. /// - transform: The transform to apply to the source `View`. /// - Returns: Either the original `View` or the modified `View` if the condition is `true`. @ViewBuilder func `if`\u0026lt;Content: View\u0026gt;(_ condition: Bool, transform: (Self) -\u0026gt; Content) -\u0026gt; some View { if condition { transform(self) } else { self } } } 改造后：\n缺点：需要在每个要用到版本判断的View，添加一个shouldApplyBackground计算属性\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 struct ContentView: View { private var shouldApplyBackground: Bool { guard #available(iOS 14, *) else { return true } return false } var body: some View { Text(\u0026#34;Hello, world!\u0026#34;) .padding() .if(shouldApplyBackground) { view in // We only apply this background color if shouldApplyBackground is true view.background(Color.red) } } } 第二次尝试：@autoclosure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 extension View { /// Applies the given transform if the given condition evaluates to `true`. /// - Parameters: /// - condition: The condition to evaluate. /// - transform: The transform to apply to the source `View`. /// - Returns: Either the original `View` or the modified `View` if the condition is `true`. @ViewBuilder func `if`\u0026lt;Content: View\u0026gt;(_ condition: @autoclosure () -\u0026gt; Bool, transform: (Self) -\u0026gt; Content) -\u0026gt; some View { if condition() { transform(self) } else { self } } } 改造后：\n缺点：虽然通过一个闭包的方式，可以消除创建计算属性的问题，但是同时有两个block，会造成可读性不好，而且这个版本判断也会在多个需要用到的地方重复写\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 struct ContentView: View { var body: some View { Text(\u0026#34;Hello, world!\u0026#34;) .padding() .if({ if #available(iOS 14, *) { return true } return false }()) { view in view.background(Color.red) } } } 第三次尝试（最终） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 extension View { /// Applies the given transform if the given condition evaluates to `true`. /// - Parameters: /// - condition: The condition to evaluate. /// - transform: The transform to apply to the source `View`. /// - Returns: Either the original `View` or the modified `View` if the condition is `true`. @ViewBuilder func `if`\u0026lt;Content: View\u0026gt;(_ condition: Bool, transform: (Self) -\u0026gt; Content) -\u0026gt; some View { if condition { transform(self) } else { self } } } extension Bool { static var iOS13: Bool { guard #available(iOS 14, *) else { // It\u0026#39;s iOS 13 so return true. return true } // It\u0026#39;s iOS 14 so return false. return false } } 改造后：\n1 2 3 4 5 6 7 8 9 struct ContentView: View { var body: some View { Text(\u0026#34;Hello, world!\u0026#34;) .padding() .if(.iOS13) { view in view.background(Color.red) } } } ","date":"2024-01-23T21:47:55+08:00","permalink":"https://livenbom.github.io/p/swiftui-conditional-modifier/","title":"SwiftUI Conditional Modifier"}]